import{_ as o,c as a,o as s,ag as t}from"./chunks/framework.CiYP3R3I.js";const p=JSON.parse('{"title":"Nomenclature de Code","description":"","frontmatter":{},"headers":[],"relativePath":"ressources/normes_nomenclature_code.md","filePath":"ressources/normes_nomenclature_code.md"}'),r={name:"ressources/normes_nomenclature_code.md"};function l(n,e,c,i,d,u){return s(),a("div",null,[...e[0]||(e[0]=[t('<h1 id="nomenclature-de-code" tabindex="-1">Nomenclature de Code <a class="header-anchor" href="#nomenclature-de-code" aria-label="Permalink to &quot;Nomenclature de Code&quot;">​</a></h1><blockquote>D&#39;après les notes de cours de Martin Vézina</blockquote><p>Ce document présente les normes et conventions à respecter en matière de nomenclature du code. La science est plus directive que pour les commentaires, mais là encore, des choix communautaires ou culturels peuvent s’imposer.</p><hr><h3 id="variables" tabindex="-1">Variables <a class="header-anchor" href="#variables" aria-label="Permalink to &quot;Variables&quot;">​</a></h3><p><strong>Variables d’instance et transitoires</strong> :</p><ul><li>Utilisez <code>camelCase</code> et la notation hongroise (ex. <code>notationDiteHongroise</code>).</li><li>Pas d’articles (le, la, un, des), mais prépositions autorisées (en, pour, dans).</li><li>Noms mnémotechniques : <code>sommeCarres</code>, <code>totalFacture</code>, <code>nomUtilisateur</code>.</li><li>Préférez <code>hauteurEnMetres</code> à <code>hauteurMetres</code>.</li><li>Abréviations acceptées si reconnues : <code>qteArticles</code>, <code>nbreCarte</code>.</li></ul><p><strong>Variables transitoires</strong> :</p><ul><li>Itérateurs : <code>i</code>, <code>c</code>, <code>ii</code>, <code>cc</code>.</li><li>Tampons (échange de valeurs) : <code>temp</code>.</li></ul><p><strong>Constantes</strong> :</p><ul><li>Variables globales statiques et/ou finales : <ul><li>Statiques : <code>NOMBRE_VISITES</code> (SCREAMING_CASE)</li><li>Finales : <code>PI</code></li></ul></li></ul><p><strong>Attributs</strong></p><ul><li>Notation préfixée par <code>_</code> : <ul><li><code>_prenom</code></li></ul></li></ul><p><strong>Propriétés</strong></p><ul><li>Noms communs avec une majuscule : <code>Voiture</code>, <code>MontantTotal</code>.</li></ul><hr><h3 id="classes-et-interfaces" tabindex="-1">Classes et Interfaces <a class="header-anchor" href="#classes-et-interfaces" aria-label="Permalink to &quot;Classes et Interfaces&quot;">​</a></h3><ul><li>Noms communs avec une majuscule : <code>Voiture</code>, <code>CalculateurValeurVoiture</code>.</li><li>Interfaces : préfixe <code>I</code> : <code>IPersonne</code>.</li></ul><hr><h3 id="methodes" tabindex="-1">Méthodes <a class="header-anchor" href="#methodes" aria-label="Permalink to &quot;Méthodes&quot;">​</a></h3><ul><li>Verbes transitifs en notation hongroise.</li><li>Majuscule ou minuscule selon le langage : <ul><li><strong>C#</strong> : <code>CalculerSurfacePolygone()</code></li><li><strong>Java</strong> : <code>calculerSurfacePolygone()</code></li></ul></li></ul><hr><h3 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusion&quot;">​</a></h3><p>Les conventions de nomenclature doivent garantir :</p><ul><li><strong>Lisibilité</strong></li><li><strong>Constance</strong></li><li><strong>Uniformité</strong> dans la communauté.</li></ul>',25)])])}const h=o(r,[["render",l]]);export{p as __pageData,h as default};
